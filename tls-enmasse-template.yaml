---
apiVersion: v1
kind: Template
metadata:
  name: tls-enmasse
objects:
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      addressType: queue
    name: secure-queue-inmemory
  objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        address: "${ADDRESS}"
        multicast: 'false'
        store_and_forward: 'true'
        type: address-config
      name: queue-${ADDRESS}
    spec:
      replicas: 1
      selector:
        address: "${ADDRESS}"
        role: broker
      template:
        metadata:
          labels:
            address: "${ADDRESS}"
            capability: router
            role: broker
        spec:
          containers:
          - env:
            - name: QUEUE_NAME
              value: "${ADDRESS}"
            image: artemis
            lifecycle:
              preStop:
                exec:
                  command:
                  - "/opt/artemis-shutdown-hook/bin/artemis-shutdown-hook"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 61616
              name: core
            volumeMounts:
            - mountPath: "/var/run/artemis"
              name: vol-${ADDRESS}
          - env:
            - name: LINK_CAPACITY
              value: "${ROUTER_LINK_CAPACITY}"
            - name: QUEUE_NAME
              value: "${ADDRESS}"
            image: router
            livenessProbe:
              tcpSocket:
                port: amqp
            name: router
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 5671
              name: amqps
              protocol: TCP
            volumeMounts:
            - mountPath: "/etc/qpid-dispatch/ssl"
              name: ssl-certs
              readOnly: true
          volumes:
          - emptyDir: {}
            name: vol-${ADDRESS}
          - name: ssl-certs
            secret:
              secretName: qdrouterd-certs
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - router
          from:
            kind: ImageStreamTag
            name: router:${ENMASSE_VERSION}
        type: ImageChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - broker
          from:
            kind: ImageStreamTag
            name: artemis:${ENMASSE_VERSION}
        type: ImageChange
  parameters:
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: EnMasse version
    name: ENMASSE_VERSION
    value: latest
  - description: The address to use for the queue
    name: ADDRESS
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      addressType: queue
    name: secure-queue-persisted
  objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: pvc-${ADDRESS}
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: "${STORAGE_CAPACITY}"
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        address: "${ADDRESS}"
        multicast: 'false'
        store_and_forward: 'true'
        type: address-config
      name: queue-${ADDRESS}
    spec:
      replicas: 1
      selector:
        address: "${ADDRESS}"
        role: broker
      template:
        metadata:
          labels:
            address: "${ADDRESS}"
            capability: router
            role: broker
        spec:
          containers:
          - env:
            - name: QUEUE_NAME
              value: "${ADDRESS}"
            image: artemis
            lifecycle:
              preStop:
                exec:
                  command:
                  - "/opt/artemis-shutdown-hook/bin/artemis-shutdown-hook"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 61616
              name: core
            volumeMounts:
            - mountPath: "/var/run/artemis"
              name: vol-${ADDRESS}
          - env:
            - name: LINK_CAPACITY
              value: "${ROUTER_LINK_CAPACITY}"
            - name: QUEUE_NAME
              value: "${ADDRESS}"
            image: router
            livenessProbe:
              tcpSocket:
                port: amqp
            name: router
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 5671
              name: amqps
              protocol: TCP
            volumeMounts:
            - mountPath: "/etc/qpid-dispatch/ssl"
              name: ssl-certs
              readOnly: true
          volumes:
          - name: vol-${ADDRESS}
            persistentVolumeClaim:
              claimName: pvc-${ADDRESS}
          - name: ssl-certs
            secret:
              secretName: qdrouterd-certs
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - router
          from:
            kind: ImageStreamTag
            name: router:${ENMASSE_VERSION}
        type: ImageChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - broker
          from:
            kind: ImageStreamTag
            name: artemis:${ENMASSE_VERSION}
        type: ImageChange
  parameters:
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: EnMasse version
    name: ENMASSE_VERSION
    value: latest
  - description: The address to use for the queue
    name: ADDRESS
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      addressType: topic
    name: secure-topic-inmemory
  objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        address: "${ADDRESS}"
        multicast: 'true'
        store_and_forward: 'true'
        type: address-config
      name: topic-${ADDRESS}
    spec:
      replicas: 1
      selector:
        address: "${ADDRESS}"
        role: broker
      template:
        metadata:
          labels:
            address: "${ADDRESS}"
            capability: router
            role: broker
        spec:
          containers:
          - env:
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            image: artemis
            lifecycle:
              preStop:
                exec:
                  command:
                  - "/opt/artemis-shutdown-hook/bin/artemis-shutdown-hook"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 61616
              name: core
            volumeMounts:
            - mountPath: "/var/run/artemis"
              name: vol-${ADDRESS}
          - env:
            - name: LINK_CAPACITY
              value: "${ROUTER_LINK_CAPACITY}"
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            image: router
            livenessProbe:
              tcpSocket:
                port: amqp
            name: router
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 5671
              name: amqps
              protocol: TCP
            volumeMounts:
            - mountPath: "/etc/qpid-dispatch/ssl"
              name: ssl-certs
              readOnly: true
          - env:
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            image: topic-forwarder:${ENMASSE_VERSION}
            livenessProbe:
              httpGet:
                path: "/health"
                port: health
            name: forwarder
            ports:
            - containerPort: 8080
              name: health
          volumes:
          - emptyDir: {}
            name: vol-${ADDRESS}
          - name: ssl-certs
            secret:
              secretName: qdrouterd-certs
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - router
          from:
            kind: ImageStreamTag
            name: router:${ENMASSE_VERSION}
        type: ImageChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - broker
          from:
            kind: ImageStreamTag
            name: artemis:${ENMASSE_VERSION}
        type: ImageChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - forwarder
          from:
            kind: ImageStreamTag
            name: topic-forwarder:${ENMASSE_VERSION}
        type: ImageChange
  parameters:
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: EnMasse version
    name: ENMASSE_VERSION
    value: latest
  - description: The address to use for the topic
    name: ADDRESS
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    labels:
      addressType: topic
    name: secure-topic-persisted
  objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: pvc-${ADDRESS}
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: "${STORAGE_CAPACITY}"
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        address: "${ADDRESS}"
        multicast: 'true'
        store_and_forward: 'true'
        type: address-config
      name: topic-${ADDRESS}
    spec:
      replicas: 1
      selector:
        address: "${ADDRESS}"
        role: broker
      template:
        metadata:
          labels:
            address: "${ADDRESS}"
            capability: router
            role: broker
        spec:
          containers:
          - env:
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            image: artemis
            lifecycle:
              preStop:
                exec:
                  command:
                  - "/opt/artemis-shutdown-hook/bin/artemis-shutdown-hook"
            livenessProbe:
              tcpSocket:
                port: amqp
            name: broker
            ports:
            - containerPort: 5673
              name: amqp
            - containerPort: 61616
              name: core
            volumeMounts:
            - mountPath: "/var/run/artemis"
              name: vol-${ADDRESS}
          - env:
            - name: LINK_CAPACITY
              value: "${ROUTER_LINK_CAPACITY}"
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            image: router
            livenessProbe:
              tcpSocket:
                port: amqp
            name: router
            ports:
            - containerPort: 5672
              name: amqp
              protocol: TCP
            - containerPort: 5671
              name: amqps
              protocol: TCP
            volumeMounts:
            - mountPath: "/etc/qpid-dispatch/ssl"
              name: ssl-certs
              readOnly: true
          - env:
            - name: TOPIC_NAME
              value: "${ADDRESS}"
            image: topic-forwarder:${ENMASSE_VERSION}
            livenessProbe:
              httpGet:
                path: "/health"
                port: health
            name: forwarder
            ports:
            - containerPort: 8080
              name: health
          volumes:
          - name: vol-${ADDRESS}
            persistentVolumeClaim:
              claimName: pvc-${ADDRESS}
          - name: ssl-certs
            secret:
              secretName: qdrouterd-certs
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - router
          from:
            kind: ImageStreamTag
            name: router:${ENMASSE_VERSION}
        type: ImageChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - broker
          from:
            kind: ImageStreamTag
            name: artemis:${ENMASSE_VERSION}
        type: ImageChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - forwarder
          from:
            kind: ImageStreamTag
            name: topic-forwarder:${ENMASSE_VERSION}
        type: ImageChange
  parameters:
  - description: The link capacity setting for router
    name: ROUTER_LINK_CAPACITY
    value: '50'
  - description: Storage capacity required for volume claims
    name: STORAGE_CAPACITY
    value: 2Gi
  - description: EnMasse version
    name: ENMASSE_VERSION
    value: latest
  - description: The address to use for the topic
    name: ADDRESS
    required: true
- apiVersion: v1
  kind: Template
  metadata:
    name: direct
  objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
        address: "${ADDRESS}"
        multicast: "${MULTICAST}"
        store_and_forward: 'false'
        type: address-config
      name: config-${ADDRESS}
  parameters:
  - description: The address to use for the address
    name: ADDRESS
    required: true
  - description: If the address should have multicast semantics or not
    name: MULTICAST
    required: true
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: configmap-bridge
  spec:
    dockerImageRepository: "${CONFIGMAP_BRIDGE_IMAGE}"
    importPolicy:
      scheduled: true
    tags:
    - annotations:
        description: ConfigMap AMQP Bridge
        tags: enmasse,messaging,configmap,amqp
        version: '1.0'
      name: "${ENMASSE_VERSION}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      name: configmap-bridge
    name: configmap-bridge
  spec:
    replicas: 1
    selector:
      name: configmap-bridge
    template:
      metadata:
        labels:
          name: configmap-bridge
      spec:
        containers:
        - image: configmap-bridge
          livenessProbe:
            tcpSocket:
              port: amqp
          name: bridge
          ports:
          - containerPort: 5672
            name: amqp
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - bridge
        from:
          kind: ImageStreamTag
          name: configmap-bridge:${ENMASSE_VERSION}
      type: ImageChange
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ragent
  spec:
    dockerImageRepository: "${RAGENT_IMAGE}"
    importPolicy:
      scheduled: true
    tags:
    - annotations:
        description: EnMasse router agent
        tags: enmasse,messaging,ragent,config,amqp
        version: '1.0'
      name: "${ENMASSE_VERSION}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      name: ragent
    name: ragent
  spec:
    replicas: 1
    selector:
      name: ragent
    template:
      metadata:
        labels:
          name: ragent
      spec:
        containers:
        - image: ragent
          livenessProbe:
            tcpSocket:
              port: amqp
          name: ragent
          ports:
          - containerPort: 55672
            name: amqp
            protocol: TCP
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ragent
        from:
          kind: ImageStreamTag
          name: ragent:${ENMASSE_VERSION}
      type: ImageChange
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: router
  spec:
    dockerImageRepository: "${ROUTER_IMAGE}"
    importPolicy:
      scheduled: true
    tags:
    - annotations:
        description: Qpid Dispatch Router
        tags: enmasse,messaging,router,qpid,amqp
        version: '1.0'
      name: "${ENMASSE_VERSION}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      name: qdrouterd
    name: qdrouterd
  spec:
    replicas: 1
    selector:
      name: qdrouterd
    template:
      metadata:
        labels:
          capability: router
          name: qdrouterd
      spec:
        containers:
        - env:
          - name: LINK_CAPACITY
            value: "${ROUTER_LINK_CAPACITY}"
          image: router
          livenessProbe:
            tcpSocket:
              port: amqp
          name: router
          ports:
          - containerPort: 5672
            name: amqp
            protocol: TCP
          - containerPort: 5671
            name: amqps
            protocol: TCP
          volumeMounts:
          - mountPath: "/etc/qpid-dispatch/ssl"
            name: ssl-certs
            readOnly: true
        volumes:
        - name: ssl-certs
          secret:
            secretName: qdrouterd-certs
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - router
        from:
          kind: ImageStreamTag
          name: router:${ENMASSE_VERSION}
      type: ImageChange
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: artemis
  spec:
    dockerImageRepository: "${BROKER_IMAGE}"
    importPolicy:
      scheduled: true
    tags:
    - annotations:
        description: Artemis message broker
        tags: enmasse,messaging,activemq,artemis,broker,amqp
        version: '1.0'
      name: "${ENMASSE_VERSION}"
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: topic-forwarder
  spec:
    dockerImageRepository: "${TOPIC_FORWARDER_IMAGE}"
    importPolicy:
      scheduled: true
    tags:
    - annotations:
        description: Topic broker forwarder
        tags: enmasse,messaging,broker,forwarding,amqp
        version: '1.0'
      name: "${ENMASSE_VERSION}"
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: subserv
  spec:
    dockerImageRepository: "${SUBSERV_IMAGE}"
    importPolicy:
      scheduled: true
    tags:
    - annotations:
        description: Subscription service
        tags: enmasse,messaging,amqp,subscription,topic
        version: '1.0'
      name: "${ENMASSE_VERSION}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      name: subserv
    name: subserv
  spec:
    replicas: 1
    selector:
      name: subserv
    template:
      metadata:
        labels:
          name: subserv
      spec:
        containers:
        - image: subserv
          livenessProbe:
            tcpSocket:
              port: amqp
          name: subserv
          ports:
          - containerPort: 5672
            name: amqp
            protocol: TCP
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - subserv
        from:
          kind: ImageStreamTag
          name: subserv:${ENMASSE_VERSION}
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    name: messaging
  spec:
    ports:
    - name: amqp
      port: 5672
      protocol: TCP
      targetPort: 5672
    - name: amqps
      port: 5671
      protocol: TCP
      targetPort: 5671
    selector:
      capability: router
- apiVersion: v1
  kind: Service
  metadata:
    name: ragent
  spec:
    ports:
    - port: 55672
      protocol: TCP
      targetPort: 55672
    selector:
      name: ragent
- apiVersion: v1
  kind: Service
  metadata:
    name: configuration
  spec:
    ports:
    - port: 5672
      protocol: TCP
      targetPort: 5672
    selector:
      name: configmap-bridge
- apiVersion: v1
  kind: Service
  metadata:
    name: subscription
  spec:
    ports:
    - port: 5672
      protocol: TCP
      targetPort: 5672
    selector:
      name: subserv
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: storage-controller
  spec:
    dockerImageRepository: "${STORAGE_CONTROLLER_IMAGE}"
    importPolicy:
      scheduled: true
    tags:
    - annotations:
        description: EnMasse storage controller
        tags: enmasse,messaging,storage,controller
        version: '1.0'
      name: "${ENMASSE_VERSION}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      name: storage-controller
    name: storage-controller
  spec:
    replicas: 1
    selector:
      name: storage-controller
    strategy:
      rollingParams:
        maxSurge: 0
      type: Rolling
    template:
      metadata:
        labels:
          name: storage-controller
      spec:
        containers:
        - image: storage-controller
          livenessProbe:
            httpGet:
              path: "/health"
              port: health
          name: controller
          ports:
          - containerPort: 8080
            name: health
        serviceAccount: deployer
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - controller
        from:
          kind: ImageStreamTag
          name: storage-controller:${ENMASSE_VERSION}
      type: ImageChange
- apiVersion: v1
  data:
    json: |
      {
          "myqueue": { "store_and_forward":true, "multicast":false, "flavor": "vanilla-queue" },
          "mytopic": { "store_and_forward":true, "multicast":true, "flavor": "vanilla-topic" },
          "anycast": { "store_and_forward":false, "multicast":false },
          "broadcast": { "store_and_forward":false, "multicast":true }
      }
  kind: ConfigMap
  metadata:
    name: maas
- apiVersion: v1
  data:
    json: |
      {
          "vanilla-queue": { "templateName":"queue-inmemory" },
          "vanilla-topic": { "templateName":"topic-inmemory" }
      }
  kind: ConfigMap
  metadata:
    name: flavor
parameters:
- description: The image to use for the router
  name: ROUTER_IMAGE
  value: gordons/qdrouterd:latest
- description: The default image to use as broker
  name: BROKER_IMAGE
  value: enmasseproject/artemis:latest
- description: The default image to use as topic forwarder
  name: TOPIC_FORWARDER_IMAGE
  value: enmasseproject/topic-forwarder:latest
- description: The link capacity setting for router
  name: ROUTER_LINK_CAPACITY
  value: '50'
- description: The image to use for the configmap notification bridge
  name: CONFIGMAP_BRIDGE_IMAGE
  value: enmasseproject/configmap-bridge:latest
- description: The docker image to use for the storage controller
  name: STORAGE_CONTROLLER_IMAGE
  value: enmasseproject/storage-controller:latest
- description: The image to use for the router agent
  name: RAGENT_IMAGE
  value: enmasseproject/ragent:latest
- description: The image to use for the subscription services
  name: SUBSERV_IMAGE
  value: enmasseproject/subserv:latest
- description: EnMasse version
  name: ENMASSE_VERSION
  value: latest
